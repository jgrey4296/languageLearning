:set -XOverloadedStrings
:set prompt "tidal>"

import Sound.Tidal.Context
import Sound.Tidal.MIDI.Context
import qualified Sound.Tidal.Scales as Scales
import qualified Sound.Tidal.Chords as Chords

devices <- midiDevices
m1 <- midiStream devices "jgin" 1 synthController
m2 <- midiStream devices "jgin" 2 synthController
m3 <- midiStream devices "jgin" 3 synthController
m4 <- midiStream devices "jgin" 4 synthController
(cps, nudger, getNow) <- cpsUtils'


(d1,t1) <- superDirtSetters getNow
(d2,t2) <- superDirtSetters getNow
(d3,t3) <- superDirtSetters getNow
(d4,t4) <- superDirtSetters getNow
(d5,t5) <- superDirtSetters getNow
(d6,t6) <- superDirtSetters getNow
(d7,t7) <- superDirtSetters getNow
(d8,t8) <- superDirtSetters getNow
(d9,t9) <- superDirtSetters getNow
(d10,t10) <- superDirtSetters getNow
    
(c1,ct1) <- dirtSetters getNow
(c2,ct2) <- dirtSetters getNow
(c3,ct3) <- dirtSetters getNow
(c4,ct4) <- dirtSetters getNow
(c5,ct5) <- dirtSetters getNow
(c6,ct6) <- dirtSetters getNow
(c7,ct7) <- dirtSetters getNow
(c8,ct8) <- dirtSetters getNow
(c9,ct9) <- dirtSetters getNow
(c10,ct10) <- dirtSetters getNow
    
let bps x = cps (x/2)
let hush = mapM_ ($ silence) [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,d1,d2,d3,d4,d5,d6,d7,d8,d9,d10, m1, m2, m3, m4]
let solo = (>>) hush

-- let p = streamReplace tidal
--     hush = streamHush tidal
--     list = streamList tidal
--     mute = streamMute tidal
--     unmute = streamUnmute tidal
--     solo = streamSolo tidal
--     unsolo = streamUnsolo tidal
--     once = streamOnce tidal False
--     asap = streamOnce tidal True
--     setcps = asap . cps
--     xfade = transition tidal (Sound.Tidal.Transition.xfadeIn 4)
--     xfadeIn t = transition tidal (Sound.Tidal.Transition.xfadeIn t)
--     histpan t = transition tidal (Sound.Tidal.Transition.histpan t)
--     wait t = transition tidal (Sound.Tidal.Transition.wait t)
--     waitT f t = transition tidal (Sound.Tidal.Transition.waitT f t)
--     jump = transition tidal (Sound.Tidal.Transition.jump)
--     jumpIn t = transition tidal (Sound.Tidal.Transition.jumpIn t)
--     jumpIn' t = transition tidal (Sound.Tidal.Transition.jumpIn' t)
--     jumpMod t = transition tidal (Sound.Tidal.Transition.jumpMod t)
--     mortal lifespan release = transition tidal (Sound.Tidal.Transition.mortal lifespan release)
--     interpolate = transition tidal (Sound.Tidal.Transition.interpolate)
--     interpolateIn t = transition tidal (Sound.Tidal.Transition.interpolateIn t)
--     clutch = transition tidal (Sound.Tidal.Transition.clutch)
--     clutchIn t = transition tidal (Sound.Tidal.Transition.clutchIn t)
--     anticipate = transition tidal (Sound.Tidal.Transition.anticipate)
--     anticipateIn t = transition tidal (Sound.Tidal.Transition.anticipateIn t)
--     d1 = p \"1\"
--     d2 = p \"2\"
--     d3 = p \"3\"
--     d4 = p \"4\"
--     d5 = p \"5\"
--     d6 = p \"6\"
--     d7 = p \"7\"
--     d8 = p \"8\"
--     d9 = p \"9\"
--     d10 = p \"10\"
--     d11 = p \"11\"
--     d12 = p \"12\"
--     d13 = p \"13\"
--     d14 = p \"14\"
--     d15 = p \"15\"
--     d16 = p \"16\"

--   (tidal-send-string "now' <- getNow")
--   (tidal-send-string "let now = nextSam now'")
--   (tidal-send-string "let retrig = (now `rotR`)")
--   (tidal-send-string "let fadeOut n = spread' (_degradeBy) (retrig $ slow n $ envL)")
--   (tidal-send-string "let fadeIn n = spread' (_degradeBy) (retrig $ slow n $ (1-) <$> envL)")
