* CCalc
  [[https://www.cs.utexas.edu/users/tag/cc/][The Causal Calculator]]
  [[http://www.cs.utexas.edu/users/tag/mad/][MAD]]
  [[https://www.cs.utexas.edu/users/tag/cc/tutorial/toc.html][Online Tutorial]].

* Using
  Needs swi-prolog < 7
  So rebuild from the git ref 406202420c of [[https://github.com/SWI-Prolog/swipl][swipl]] 
  You need to update submodules first *before* going off HEAD.
  Make sure to add the compiler flags *brew info readline* suggests.
  
  Solvers need to be put in a *Darwin* solvers subdir.
  For Solvers, use [[https://github.com/roberto-bayardo/relsat][relsat]].
  [[https://gitlab.com/HenryKautz/Walksat][Walksat]] also compiles but doesn't output solutions.

** Syntax
   
*** Constants
    Types: fluent, intertialFluent, exogenousAction

    #+begin_src prolog
    :- constants
    	p :: inertialFluent(0..3);
        a :: exogenousAction.
    #+end_src

*** Transitions
    Define movements between states, using actions

    #+begin_src prolog
    a causes c.
    a causes c=1 if c=0.
    nonexecutable a if c=3.
    #+end_src

*** Variables
    Uppercase as standard in prolog.
    #+begin_src prolog
    :- variables
    	I :: 0..2.

    a causes c=I+1 if c=I.
    #+end_src

*** Macros
    
    #+begin_src prolog
    :- macros
    	n -> 3.

    :- constants
    	p :: inertialFluent(0..n).
    #+end_src

*** Queries
    Defined as paths of node -> action -> node of maxstep length.

    #+begin_src prolog
    %% Calls for finding paths of length 1.
    :- query
    	maxstep :: 1.
    #+end_src

    Add requirements at particular nodes or edges.
    #+begin_src prolog 
      :- query
         maxstep :: 2;
         0 : c=5; %% '& a'; or ', a;'
         0 : a;
         1 : a;
         maxstep :: 1.
    #+end_src
