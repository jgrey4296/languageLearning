* iEL : Institutional Exclusion Logic 
 Parser: pyparsing / parser combinator
 Fact Base: Trie
 + Runtime

** TODOs

*** TODO Query results
    Have Trie queries return Result | Failure
    Where Results are nested arrays of bindings
    So for .a.b.c, a.b.d, a.b.e:
    .a.b.$x?    =>  Result([c,d,e])
    For .a.b.c.x, .a.b.d.x, .a.b.e.y, a.b.e.z:
    .a.b.$g.x =>   Result([c,d])
    And For:
    .a.b.$g.$h => Result([(c,[x]),(d,[x]),(e,[y,z])])

*** TODO strip quotes from strings?
** Parser
*** TODO Add bindings

** Trie
** Parser -> Trie Integration
** Runtime
** Language notes:
*** Assertions
    Assertions are basic statements: .a.b.c
*** Retractions
    Retractions use ~ at the beginning: ~.a.b.c
*** Rules
    Rules have the form .a.b.c.{ [conditions] | [comparisons] -> [actions] }
    Brackets are optional, multiple of each segment are separated by commas.
    Bindings between segments use $name
    Rules are checked at parse time for binding balance. Any binding used in the comparisons
    or the actions *must* be in the conditions

**** Bindings.
     Bindings may be named (.a.b.$c) and unnamed (.a.b.$1)
     If binding on an exclusion (.a.b!$c) it doesnt matter as to the name chosen.
     If binding on a non-exclusion, numbers will select that entry if it exists, clipped.
     Meanwhile names do nothing special, just bind the value

**** Rule Actions

     Rule actions can be assertions: .a.b.c.{ [] -> [.a.b.d]}
     Retractions: .a.b.c.{[] -> [~.a.b.c]}
     Or Arithmetic operations: .a.b.c.{[] -> .a.b.d + 20 }

**** Comparisons
     Normal ones of <, >, <=, >=, ==, !=, 
     And contains '@' for both 'a' @ ['b','c','a']
     and:
     .a.b.c
     .a.b.d
     .a.b.e
     => e @ .a.b..

     And also '~=', the near operator. 
     9 ~=(1) 10 => True
     6 ~=(1) 10 => False
     6 ~=(4) 10 => True
     14 ~=(4) 10 => True

*** Arrays / sequence
    A fact can have a sequence of facts or values as a leaf node.
    Allowed: .a.b.c.[1,2,3,4]
    		 .a.b.c.[.a.b, .c.d]
    Not Allowed:
    		.a.b.c.[4,5].e.f
*** Strings.
    Strings are part of facts using double quotes:
    .a.b.c."testing blah".e.f
**** TODO String interpolation
     .a.b.c."this is a ${blah}".blah.something => "this is a something"
*** TODO Interfaces and tree application
    Interfaces should work as an operator to do runtime checks on sub structure
    Operator ::? *tests* the structure
    Operator :: *applies* the structure
    :: should work with variables
    so:
    .a.b.$c.f, .a.b.$d.g
    .e :: .a.b($c=blah, $d=bloo)
    =>
    .e.blah.f
    .e.bloo.g
*** Numbers.
    Numbers do not have to be leaves, and can take a number of forms:
    Integers: .a.b.c.5
    underscore integers: .a.b.c.5_000_000
    decimals: .a.b.c.1d5
    fractions: .a.b.c.1/5
    negatives: .a.b.c.-15
*** Exclusion semantics:
    Upscaling:
    .a.b.c  => .a.b!c
    Auto replacement:
    .a.b!c => .a.b.!d
    DownScaling:
    .a.b.!d => .a.b.c
*** TODO Institutions
    Institutions should be able to annotate:
    Structure, IGUs, Inputs, Outputs, variables?

** Tests


** TODO 
implement the allNodes dictionary:
add and remove from it whenever nodes are created and destroyed.
use the uuid as the value of a binding, look up as necessary.

update trie node methods so instead of ELV.ARR and ELV.RULE,
add hash(repr(value)) to the children instead.

check that the semantics don't have to be .a.b!{} or .a.b![],
but can be .a.b.{} .a.b.{}' .a.c.[] .a.c.[]'
so check __contains__, __delitem__, __setitem__, __getitem__...

Should add type checking / subtree checking in though,
 to ensure children are all the same *shallow*? type.

Operations to get leaves? A Breadth first collection of nodes at a certain depth?

change :: to type specifier? is there a difference between type specifier and subtree app?
have   ::? as type check

type specifier / check ensures that any fact starts with the defined string?

subtree app would become << :
.a.b.c
.a.b.d
.a.e

.d << .a
# .d.b.c, .d.b.d, .d.e

.a.b.c :: int 
# marks c as an int
.a.b.c ::? int
#checks it is an int

a.b.c :: .e.f.g
a.b.c ::? .e.f.g


#
.tool.requirements_to_build.[x] :: item
.tool.produceds.[x]             :: item
.tool.time.to.use.x             :: int
.tool.text.x                    :: string


.a.b.c.d
.a.b.c.e.i
.a.b.f.g

.a.b? -> ELSuccess
.a.c? -> ELFail
.a.b.$x? -> ELGet(.a.b.$x,[{'x':'c'},{'x':'f'}])
.a.c.$x? -> ELFail
.a.b.$x.$y? -> ELGet(.a.b.$x.$y,[{'x':'c','y':'d'},{'x':'f','y':'g'}])
.a.b.$x.e.$y? -> ELGet(.a.b.$x.e.$y, [{'x':'c'},{'y':'i'}])]

