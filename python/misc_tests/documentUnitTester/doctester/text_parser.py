#pylint: disable=invalid-name
"""
	Definitions for a simple Document DSL parser
"""
import logging as root_logger
import re
from collections import namedtuple
import pyparsing as pp

from doctester.section import Section
logging = root_logger.getLogger(__name__)

#Data Tuples generated by the parser:
HEADER = namedtuple('Header', 'level title')
PARAGRAPH = namedtuple('Paragraph', 'text tags citations')
TAG = namedtuple('Tag', 'text')
CITATION = namedtuple('Citation', 'text')

#Utility methods
LINESEP = re.compile(r'\n\s*\n+')
s = pp.Suppress
op = pp.Optional
opLn = s(op(pp.LineEnd()))

#Actual parsers:
tag = s(pp.Literal('%')) \
      + pp.OneOrMore(pp.Word(pp.alphas + pp.nums)) \
      + s(pp.Literal('%'))

citation = s(pp.Literal('[')) \
           + pp.OneOrMore(pp.Word(pp.alphas)) \
           + s(pp.Literal(', ')) \
           + pp.Word(pp.nums) \
           + s(pp.Literal(']'))

heading_stars = pp.lineStart + pp.OneOrMore(pp.Literal('*'))
heading = heading_stars + pp.restOfLine

paragraph = pp.OneOrMore(s(pp.Word(pp.alphas+'.!"\'()+-_=@#$<>, ?/;:')) | citation | tag)

#The main entry point of the parser
ROOT = pp.OneOrMore(heading | paragraph)

#The Parsing actions to create intermediate data structures:
#pylint: disable=unnecessary-lambda
heading_stars.setParseAction(lambda toks: len(toks))
heading.setParseAction(lambda toks: HEADER(toks[0], toks[1].strip()))

tag.setParseAction(lambda toks: TAG(" ".join(toks[:])))
citation.setParseAction(lambda toks: CITATION(" ".join(toks[:])))
#pylint: enable=unnecessary-lambda

#pylint: disable=too-many-branches
def parseText(text):
    """
    	Wraps the parser with logic to create the appropriate data structures
    """
    #splits text into paragraphs to parse, which is easier than making the parser
    #more complex
    separated = LINESEP.split(text)
    rootSection = None
    currentSection = None
    while bool(separated):
        current = separated.pop(0)
        if current == "":
            continue
        try:
            results = ROOT.parseString(current)
        except Exception as e:
            logging.info('Parser Issue with: {}'.format(current))
            raise e
        #parsed a header, create a section
        if not bool(results):
            results = "Nothing, just add the paragraph"

        if isinstance(results[0], HEADER) and rootSection is None:
            #a new, root section
            currentSection = Section(results[0].title, results[0].level)
            rootSection = currentSection
            for res in results[1:]:
                if isinstance(res, TAG):
                    currentSection.add_tag(res.text)

        elif isinstance(results[0], HEADER):
            #a subsection
            if results[0].level > currentSection._level:
                currentSection = currentSection.add_subsection(results[0].title,
                                                               results[0].level)
            elif results[0].level <= currentSection._level:
                #a subsection of an ancestor
                while results[0].level <= currentSection._level:
                    currentSection = currentSection.get_parent()

                currentSection = currentSection.add_subsection(results[0].title,
                                                               results[0].level)
            for res in results[1:]:
                if isinstance(res, TAG):
                    currentSection.add_tag(res.text)

        else:
            #Paragraphs of a section
            currentParagraph = currentSection.add_paragraph(current)
            for res in results:
                if isinstance(res, TAG):
                    currentParagraph['tags'].add(res.text)
                elif isinstance(res, CITATION):
                    currentParagraph['citations'].add(res.text)

    return rootSection
#pylint: enable=too-many-branches
