* Language: Python

[[http://anandology.com/python-practice-book/getting-started.html][Python Practice]]
[[https://docs.python.org/2/py-modindex.html][Module List]]
[[http://www.tutorialspoint.com/python/python_lists.htm][List operations]]

[[https://wiki.python.org/moin/HowTo/Sorting][Sorting]]

** Links
https://docs.python.org/2/library/json.html
https://docs.python.org/2/reference/
https://docs.python.org/2/tutorial/errors.html
https://docs.python.org/2/library/random.html
https://wiki.python.org/moin/ParallelProcessing
https://docs.python.org/2/library/stdtypes.html

http://www.tutorialspoint.com/python/python_overview.htm

http://www.nltk.org/book/
http://www.nltk.org/

http://stevenloria.com/tutorial-wordnet-textblob/
http://textblob.readthedocs.org/en/dev/

http://www.clips.ua.ac.be/public-scripts
http://www.clips.ua.ac.be/pages/pattern

http://learnpythonthehardway.org/book/index.html

http://www.aaronstannard.com/post/2012/08/17/How-to-Setup-a-Proper-Python-Environment-on-Windows.aspx

https://cloud.github.com/downloads/tartley/python-regex-cheatsheet/cheatsheet.pdf
http://www.slideshare.net/Siddhi/creating-domain-specific-languages-in-python




** Inspection and Output
has a REPL

*** Python has a print function, available in versions 2.7 and 3...
print("I'm Python. Nice to meet you!")
*** and an older print statement, in all 2.x versions but removed from 3.
print "I'm also Python!"


*** explore an object:
import inspect
memberList = inspect.getmembers(object)
for a in memberList:
    print a


** Good Style / unicode
# -*- coding: utf-8 -*-

#re.sub(ur'[\u064B-\u0652\u06D4\u0670\u0674\u06D5-\u06ED]+', '', ...)
** Generators
def double_numbers(iterable):
    for i in iterable:
        yield i + i

A generator creates values on the fly.
Instead of generating and returning all values at once it creates one in each
iteration.  This means values bigger than 15 wont be processed in
double_numbers.
Note xrange is a generator that does the same thing range does.
Creating a list 1-900000000 would take lot of time and space to be made.
xrange creates an xrange generator object instead of creating the entire list like range does.
We use a trailing underscore in variable names when we want to use a name that 
would normally collide with a python keyword

xrange_ = xrange(1, 900000000)

*** will double all numbers until a result >=30 found
for i in double_numbers(xrange_):
    print(i)
    if i >= 30:
        break


** Decorators
 in this example beg wraps say
 Beg will call say. If say_please is True then it will change the returned
 message


from functools import wraps


def beg(target_function):
    @wraps(target_function)
    def wrapper(*args, **kwargs):
        msg, say_please = target_function(*args, **kwargs)
        if say_please:
            return "{} {}".format(msg, "Please! I am poor :(")
        return msg

    return wrapper


@beg
def say(say_please=False):
    msg = "Can you buy me a beer?"
    return msg, say_please


print(say())  * Can you buy me a beer?
print(say(say_please=True))  * Can you buy me a beer? Please! I am poor :(

** Compilation

** Imports
*** You can import modules
import math
print(math.sqrt(16))  * => 4

*** You can get specific functions from a module
from math import ceil, floor
print(ceil(3.7))  * => 4.0
print(floor(3.7))   * => 3.0

*** You can import all functions from a module.
Warning: this is not recommended

from math import *

*** You can shorten module names
import math as m
math.sqrt(16) == m.sqrt(16)   * => True

*** You can find out which functions and attributes defines a module.
import math
dir(math)



** Comments
*** Single line comments start with a number symbol.

""" Multiline strings can be written
    using three "'s, and are often used
    as comments
"""


** Whitespace and Statements
Whitespace is important, maintain indentation

** Memory Management

** Value vs Reference 


** Scope

** Basic Data Types
https://docs.python.org/2/library/stdtypes.html

numerics,
sequences,
mappings,
files,
classes,
instances,
exceptions.

** Arithmetic
*** Math is what you would expect
1 + 1  * => 2
8 - 1  * => 7
10 * 2  * => 20
35 / 5  * => 7

7 % 3 * => 1

*** Division is a bit tricky. It is integer division and floors the results automatically.
5 / 2  * => 2

11.0 / 4.0  * => 2.75 ahhh...much better

*** random numbers:
https://docs.python.org/2/library/random.html

random.seed([x])
random.randint(a,b)
random.random() *0.0 - 1.0

*** random sequence choice:
random.choice(seq)
random.shuffle(x[,random])
random.sample(population, k)


** Bitwise

** Strings
*** Strings are created with " or '
"This is a string."
'This is also a string.'

*** Strings can be added too!
"Hello " + "world!"  * => "Hello world!"

*** A string can be treated like a list of characters
"This is a string"[0]  * => 'T'

*** % can be used to format strings, like this:
"%s can be %s" % ("strings", "interpolated")

*** A newer way to format strings is the format method.
"{0} can be {1}".format("strings", "formatted")
*** You can use keywords if you don't want to count.
"{name} wants to eat {food}".format(name="Bob", food="lasagna")


*** Strip whitespace:
"a string     ".strip()

*** also has rstrip and lstrip


** Booleans
*** Boolean Operators
+* Note "and" and "or" are case-sensitive
+True and False *=> False
+False or True *=> True
+
+* Note using Bool operators with ints
+0 and 2 *=> 0
+-5 or 0 *=> -5
+0 == False *=> True 
+2 == True *=> False 
1 == True *=> True

*** Comparisons and Logic
isinstance(var, list)


*** negate with not
not True  * => False
not False  * => True

*** Equality is ==
1 == 1  * => True
2 == 1  * => False

*** Inequality is !=
1 != 1  * => False
2 != 1  * => True

*** More comparisons
1 < 10  * => True
1 > 10  * => False
2 <= 2  * => True
2 >= 2  * => True

*** Comparisons can be chained!
1 < 2 < 3  * => True
2 < 3 < 2  * => False

** None is an object
None  * => None

*** Don't use the equality "==" symbol to compare objects to None
*** Use "is" instead
"etc" is None  * => False
None is None  * => True

 The 'is' operator tests for object identity. This isn't
 very useful when dealing with primitive values, but is
 very useful when dealing with objects.

*** None, 0, and empty strings/lists all evaluate to False.
**** All other values are True
bool(0)  * => False
bool("")  * => False


** Variables

*** No need to declare variables before assigning to them.
some_var = 5    * Convention is to use lower_case_with_underscores
some_var  * => 5

*** Accessing a previously unassigned variable is an exception.
some_other_var  * Raises a name error


** Data Structures

*** Lists
**** Lists store sequences
li = []
**** You can start with a prefilled list
other_li = [4, 5, 6]

**** Add stuff to the end of a list with append
li.append(1)    * li is now [1]
li.append(2)    * li is now [1, 2]
li.append(4)    * li is now [1, 2, 4]
li.append(3)    * li is now [1, 2, 4, 3]
**** Remove from the end with pop
li.pop()        * => 3 and li is now [1, 2, 4]
**** Let's put it back
li.append(3)    * li is now [1, 2, 4, 3] again.

**** Access a list like you would any array
li[0]  * => 1
**** Look at the last element
li[-1]  * => 3

**** Looking out of bounds is an IndexError
li[4]  * Raises an IndexError

**** You can look at ranges with slice syntax.
(It's a closed/open range for you mathy types.)
li[1:3]  * => [2, 4]
**** Omit the beginning
li[2:]  * => [4, 3]
**** Omit the end
li[:3]  * => [1, 2, 4]
**** Select every second entry
li[::2]   * =>[1, 4]
**** Revert the list
li[::-1]   * => [3, 4, 2, 1]
**** Use any combination of these to make advanced slices
li[start:end:step]

**** Remove arbitrary elements from a list with "del"
del li[2]   * li is now [1, 2, 3]

**** You can add lists
li + other_li   * => [1, 2, 3, 4, 5, 6] - Note: values for li and for other_li are not modified.

**** Concatenate lists with "extend()"
li.extend(other_li)   * Now li is [1, 2, 3, 4, 5, 6]

**** Check for existence in a list with "in"
1 in li   * => True

**** Examine the length with "len()"
len(li)   * => 6


*** Tuples
*** Tuples are like lists but are immutable.
tup = (1, 2, 3)
tup[0]   * => 1
tup[0] = 3  * Raises a TypeError

*** You can do all those list thingies on tuples too
len(tup)   * => 3
tup + (4, 5, 6)   * => (1, 2, 3, 4, 5, 6)
tup[:2]   * => (1, 2)
2 in tup   * => True

*** You can unpack tuples (or lists) into variables
a, b, c = (1, 2, 3)     *** a is now 1, b is now 2 and c is now 3
*** Tuples are created by default if you leave out the parentheses
d, e, f = 4, 5, 6
*** Now look how easy it is to swap two values
e, d = d, e     *** d is now 5 and e is now 4

*** Dictionaries
*** Dictionaries store mappings
empty_dict = {}
*** Here is a prefilled dictionary
filled_dict = {"one": 1, "two": 2, "three": 3}

*** Look up values with []
filled_dict["one"]   *** => 1

*** Get all keys as a list with "keys()"
filled_dict.keys()   *** => ["three", "two", "one"]
*** Note - Dictionary key ordering is not guaranteed.
*** Your results might not match this exactly.

*** Get all values as a list with "values()"
filled_dict.values()   *** => [3, 2, 1]
*** Note - Same as above regarding key ordering.

*** Check for existence of keys in a dictionary with "in"
"one" in filled_dict   *** => True
1 in filled_dict   *** => False

*** Looking up a non-existing key is a KeyError
filled_dict["four"]   *** KeyError

*** Use "get()" method to avoid the KeyError
filled_dict.get("one")   *** => 1
filled_dict.get("four")   *** => None
*** The get method supports a default argument when the value is missing
filled_dict.get("one", 4)   *** => 1
filled_dict.get("four", 4)   *** => 4

*** "setdefault()" inserts into a dictionary only if the given key isn't present
filled_dict.setdefault("five", 5)  *** filled_dict["five"] is set to 5
filled_dict.setdefault("five", 6)  *** filled_dict["five"] is still 5

*** Sets

*** Sets store ... well sets
empty_set = set()
*** Initialize a "set()" with a bunch of values
some_set = set([1, 2, 2, 3, 4])   *** some_set is now set([1, 2, 3, 4])

*** Since Python 2.7, {} can be used to declare a set
filled_set = {1, 2, 2, 3, 4}   *** => {1, 2, 3, 4}

*** Add more items to a set
filled_set.add(5)   *** filled_set is now {1, 2, 3, 4, 5}

*** Do set intersection with &
other_set = {3, 4, 5, 6}
filled_set & other_set   *** => {3, 4, 5}

*** Do set union with |
filled_set | other_set   *** => {1, 2, 3, 4, 5, 6}

*** Do set difference with -
{1, 2, 3, 4} - {2, 3, 5}   *** => {1, 4}

*** Check for existence in a set with in
2 in filled_set   *** => True
10 in filled_set   *** => False


*** Objects
*** None is an object
None  *** => None

*** Don't use the equality "==" symbol to compare objects to None
*** Use "is" instead
"etc" is None  *** => False
None is None  *** => True

*** The 'is' operator tests for object identity. This isn't
*** very useful when dealing with primitive values, but is
*** very useful when dealing with objects.

*** None, 0, and empty strings/lists all evaluate to False.
*** All other values are True
bool(0)  *** => False
bool("")  *** => False


**** Classes

*** We subclass from object to get a class.
class Human(object):

    *** A class attribute. It is shared by all instances of this class
    species = "H. sapiens"

    *** Basic initializer, this is called when this class is instantiated.
    *** Note that the double leading and trailing underscores denote objects
    *** or attributes that are used by python but that live in user-controlled
    *** namespaces. You should not invent such names on your own.
    def __init__(self, name):
        *** Assign the argument to the instance's name attribute
        self.name = name

    *** An instance method. All methods take "self" as the first argument
    def say(self, msg):
        return "%s: %s" % (self.name, msg)

    *** A class method is shared among all instances
    *** They are called with the calling class as the first argument
    @classmethod
    def get_species(cls):
        return cls.species

    *** A static method is called without a class or instance reference
    @staticmethod
    def grunt():
        return "***grunt***"


*** Instantiate a class
i = Human(name="Ian")
print(i.say("hi"))     *** prints out "Ian: hi"

j = Human("Joel")
print(j.say("hello"))  *** prints out "Joel: hello"

*** Call our class method
i.get_species()   *** => "H. sapiens"

*** Change the shared attribute
Human.species = "H. neanderthalensis"
i.get_species()   *** => "H. neanderthalensis"
j.get_species()   *** => "H. neanderthalensis"

*** Call the static method
Human.grunt()   *** => "***grunt***"


** Control Structures

*** IF
if some_var > 10:
    print("some_var is totally bigger than 10.")
elif some_var < 10:    * This elif clause is optional.
    print("some_var is smaller than 10.")
else:           * This is optional too.
    print("some_var is indeed 10.")


*** FOR
for animal in ["dog", "cat", "mouse"]:
    * You can use % to interpolate formatted strings
    print("%s is a mammal" % animal)

*** RANGE
"range(number)" returns a list of numbers
from zero to the given number
prints:
    0
    1
    2
    3

for i in range(4):
    print(i)

*** WHILE
While loops go until a condition is no longer met.
prints:
    0
    1
    2
    3

x = 0
while x < 4:
    print(x)
    x += 1  * Shorthand for x = x + 1

** Exceptions
https://docs.python.org/2/tutorial/errors.html

*** Handle exceptions with a try/except block
>>> try:
...    raise Exception('spam', 'eggs')
... except Exception as inst:
...    print type(inst)     * the exception instance
...    print inst.args      * arguments stored in .args
...    print inst           * __str__ allows args to be printed directly
...    x, y = inst.args
...    print 'x =', x
...    print 'y =', y
...
<type 'exceptions.Exception'>
('spam', 'eggs')
('spam', 'eggs')
x = spam
y = eggs


*** Works on Python 2.6 and up:
try:
    * Use "raise" to raise an error
    raise IndexError("This is an index error")
except IndexError as e:
    pass    * Pass is just a no-op. Usually you would do recovery here.
except (TypeError, NameError):
    pass    * Multiple exceptions can be handled together, if required.
else:   * Optional clause to the try/except block. Must follow all except blocks
    print "All good!"   * Runs only if the code in try raises no exceptions

Optional Parameters: info(something, spacings=10)

** Functions

*** Use "def" to create new functions
def add(x, y):
    print("x is %s and y is %s" % (x, y))
    return x + y    *** Return values with a return statement

*** Calling functions with parameters
add(5, 6)   *** => prints out "x is 5 and y is 6" and returns 11

*** Another way to call functions is with keyword arguments
add(y=6, x=5)   *** Keyword arguments can arrive in any order.


*** You can define functions that take a variable number of
*** positional arguments
def varargs(***args):
    return args

varargs(1, 2, 3)   *** => (1, 2, 3)


*** You can define functions that take a variable number of
*** keyword arguments, as well
def keyword_args(******kwargs):
    return kwargs

*** Let's call it to see what happens
keyword_args(big="foot", loch="ness")   *** => {"big": "foot", "loch": "ness"}


*** You can do both at once, if you like
def all_the_args(***args, ******kwargs):
    print(args)
    print(kwargs)
"""
all_the_args(1, 2, a=3, b=4) prints:
    (1, 2)
    {"a": 3, "b": 4}
"""

*** When calling functions, you can do the opposite of args/kwargs!
*** Use *** to expand tuples and use ****** to expand kwargs.
args = (1, 2, 3, 4)
kwargs = {"a": 3, "b": 4}
all_the_args(***args)   *** equivalent to foo(1, 2, 3, 4)
all_the_args(******kwargs)   *** equivalent to foo(a=3, b=4)
all_the_args(***args, ******kwargs)   *** equivalent to foo(1, 2, 3, 4, a=3, b=4)

*** Function Scope                                                                
x = 5

def setX(num):
    *** Local var x not the same as global variable x
    x = num *** => 43
    print (x) *** => 43

def setGlobalX(num):
    global x
    print (x) *** => 5
    x = num *** global var x is now set to 6
    print (x) *** => 6

setX(43)
setGlobalX(6)

*** Python has first class functions
def create_adder(x):
    def adder(y):
        return x + y
    return adder

add_10 = create_adder(10)
add_10(3)   *** => 13

*** There are also anonymous functions
(lambda x: x > 2)(3)   *** => True

*** There are built-in higher order functions
map(add_10, [1, 2, 3])   *** => [11, 12, 13]
filter(lambda x: x > 5, [3, 4, 5, 6, 7])   *** => [6, 7]

*** We can use list comprehensions for nice maps and filters
[add_10(i) for i in [1, 2, 3]]  *** => [11, 12, 13]
[x for x in [3, 4, 5, 6, 7] if x > 5]   *** => [6, 7]


** Examples



** Language Specific Concepts:

*** Beautiful Soup
http://www.crummy.com/software/BeautifulSoup/bs4/doc/

**** Get the tag you want by calling its name:
soup.head 
****Can chain:
soup.body.b

****Get all in this tree:
soup.find_all("a")

****Contents
soup.head.contents

****can iterate over thus:
for child in title_tag.children:
    print child

****for all descendents:
for child in head_tag.descendants:
    print child

****To get strings:
tag.string

****stripped strings:
for string in soup.stripped_strings:
    print(repr(string))


****Parents and siblings:
soup.parent
soup.parents
soup.next_sibling
soup.previous_sibling

**** Finding all with filters:
soup.find_all("b")
****shortcut:
soup("b")

****as a regex:
import re
for tag in soup.find_all(re.compile('^b')):
    print(tag.name)

****as a list:
soup.find_all(['a','b'])

****True gives all tags, no text strings:
soup.find_all(True)

****finally as a lambda:
soup.find_all(lambda x : return True)


****filter by tag attribute:
soup.findall(id='link2')

****search by css class:
soup.findall("a", class_="sister")

****css selector:
css_soup.select("p.strikeout.body")

**** Text:

soup.find_all(text="Elsie")


** Regex:
http://flockhart.virtualave.net/RBIF0100/regexp.html

import re
p = re.compile(r"ab*", re.IGNORECASE)

p.split("the string")
p.sub("the string", "replacement")

match = p.match()
if match:
match.group() *gets the matched text
match.span() *tuple of start end positions of match

p.search()
p.findall()
p.finditer()




prefers 'easier to ask forgiveness than permission' (EAFP) over 
'look before you leap' (LBYL). good for multi-threaded environments 
so in python:

try:
    array[idx]
except Error:
   *handle




** decorators:
@staticmethod
@classmethod


** Input:

input("prompt:") * INTERPRETS AS A PYTHON EXPRESSION
raw_input("prompt: ") *gives back a string

***windows uses 'rb' and 'wb' for binary, like jpeg and exe
f = open("file","r+") 
f.read() *can take amount
f.readline()
f.seek(5) *coupled with f.tell()

f.close()

PREFERRED FORM: (will automatically close)
with open("file","r") as f:
   read_data = f.read()


** json:
https://docs.python.org/2/library/json.html

import json
json.dumps([1,'simple','list'])
json.dump(x,f) *if f is a file object for writing, serialises object x
x = json.load(f) *to get it back

json_text = '[' + json.dumps(jgStats, sort_keys=True, indent=4,
                  separators=(',', ': ')) + ']'

outputFile = open(jsonFileName, 'w')
outputFile.write(json_text)
outputFile.close();




** URL requests
http://www.pythonforbeginners.com/python-on-the-web/how-to-use-urllib2-in-python/
***urllib2:
response = urllib2.urlopen("url")
html = response.read()

*** or with requests:
args = {'q':'query string','foo':'bar'}
data = urllib.urlencode(args)
request = urllib2.Request(url,data)
response = urllib2.urlopen(request)

** Time / Sleeping
import time
time.sleep(5) * delays for 5 seconds

** General Notes:
tuples use () and ','. Can't be changed after creation
dictionaries use {}
lists use []. append not push. pop.
all access through []
functions defined with 'def'

",".join(["a","b","c"])

** Anaconda Packages

*** Cubes
https://pythonhosted.org/cubes/

*** Disco
http://disco.readthedocs.org/en/latest/intro.html

*** HDF5
http://www.hdfgroup.org/HDF5/doc/
http://www.h5py.org/

*** Pil
http://pythonware.com/library/pil/handbook/

*** lxml
http://lxml.de/index.html***documentation

*** matplotlib
http://matplotlib.org/contents.html

*** MPI
mpi4py.scipy.org/docs/usrman/index.html

*** networkX
https://networkx.github.io/documentation/latest/index.html

*** numexpr
https://code.google.com/p/numexpr/

*** biopython
http://biopython.org/wiki/Documentation

*** numpy
http://docs.scipy.org/doc/

*** pandas
http://pandas.pydata.org/pandas-docs/dev/


*** opencv
http://docs.opencv.org/

*** pysal
pysal.geodacenter.org/1.4/users/introduction.html

*** pysam
http://pysam.readthedocs.org/en/latest/

*** pytables
https://pytables.github.io/usersguide/index.html

*** scipy
http://docs.scipy.org/doc/scipy/reference/

*** skimage
scikit-image.org/docs/dev/

*** scikit
scikit-learn.org/stable/user_guide.html

*** spyder
https://pythonhosted.org/spyder/

*** statsmodels
http://statsmodels.sourceforge.net/documentation.html

*** sympy
http://docs.sympy.org/latest/index.html

*** theano
http://deeplearning.net/software/theano/

*** astropy
http://docs.astropy.org/en/stable/

*** boto
http://boto.cloudhackers.com/en/latest/

*** cython
http://docs.cython.org/

*** python-util
http://labix.org/python-dateutil

*** distribute / setuptools
https://pythonhosted.org/setuptools/
https://pythonhosted.org/distribute/

*** docutils
http://docutils.sourceforge.net/

*** flask
http://flask.pocoo.org/docs/0.10/

*** gevent
http://www.gevent.org/contents.html
https://github.com/tmc/gevent-zeromq
https://bitbucket.org/Jeffrey/gevent-websocket

*** googlecl
https://code.google.com/p/googlecl/wiki/Manual

*** greenlet
http://greenlet.readthedocs.org/en/latest/

*** grin
https://pypi.python.org/pypi/grin

*** ipython
http://ipython.org/documentation.html

*** jinja2
http://jinja.pocoo.org/docs/dev/

*** pyflakes
http://divmod.readthedocs.org/en/latest/products/pyflakes.html

*** pycurl
http://pycurl.sourceforge.net/

*** pycairo
http://cairographics.org/documentation/pycairo/2/

*** pylib
https://readthedocs.org/projects/pylib/

*** psutil
https://code.google.com/p/psutil/wiki/Documentation

*** ply
http://www.dabeaz.com/ply/ply.html

*** pip
https://pip.pypa.io/en/latest/

*** nose
https://nose.readthedocs.org/en/latest/

*** nltk
http://www.nltk.org/

*** intel math kernal
https://software.intel.com/en-us/articles/intel-math-kernel-library-documentation

*** django
https://docs.djangoproject.com/en/dev/misc/

*** mdp-toolkit
http://mdp-toolkit.sourceforge.net/documentation.html

*** libpng
http://www.libpng.org/pub/png/libpng-1.2.5-manual.html

*** libevent
http://libevent.org/

*** pygments
http://pygments.org/docs/

*** pyparsing
http://pyparsing.wikispaces.com/Documentation

*** pytest
http://pytest.org/latest/contents.html

*** pytz
http://pytz.sourceforge.net/

*** pyyaml
http://pyyaml.org/wiki/PyYAMLDocumentation

*** pyZMQ
https://zeromq.github.io/pyzmq/

*** QT
qt-project.org/doc/

*** redis-py
http://redis-py.readthedocs.org/en/latest/

*** requests
http://docs.python-requests.org/en/latest/

*** six
pythonhosted.org/six/

*** sphinx
http://sphinx-doc.org/contents.html

*** sqlalchemy
http://docs.sqlalchemy.org/en/rel_0_8/

*** xlwt
https://secure.simplistix.co.uk/svn/xlwt/trunk/xlwt/doc/xlwt.html?p=4966

*** Google Drive Api
https://developers.google.com/drive/web/quickstart/quickstart-python




