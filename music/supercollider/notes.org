* Supercollider notes
** Server Commands
   #+begin_src 
   s.status
   s.boot
   s.reboot
   s.freeAll
   s.scope
   #+end_src

** sclang
   Started up as part of emacs sclang mode.
   has a config file defined in the emacs mode, which includes paths.
   see ~/.emacs.setup/setup_files/sclang.yaml

*** Paths
    LanguageConfig.includePaths
    LanguageConfig.addIncludePath

    Platform.classLibraryDir
    Platform.helpDir
    Platform.systemAppSupportDir
    Platform.systemExtensionDir
    Platform.userHomeDir
    Platform.userAppSupportDir
    Platform.userConfigDir
    Platform.userExtensionDir
    Platform.platformDir
    Platform.pathSeparator
    Platform.resourceDir
    Platform.defaultTempDir
   
*** SynthDefs versus Synths
    The point is to abstract concepts from the server to the client.
    Class - Instance : SynthDef - Synth
    
    Synthdefs are eval'd *only once*, so changes are through messages,
    initializations, or ugens.
    #+begin_src sclang
    //As a Function:
    { SinOsc.ar(440, 0, 0.2) }.play;
    
    //SynthDef creation
    aSynthDef = SynthDef.new("tutorial", { Out.ar(0, Sin.ar(440, 0, 0.2)) }); 
    //Simple Testing:
    aSynth = aSynthDef.play;
    //Stop the Synth
    aSynth.free;
    //Create a synth by name, lookup on server
    anotherSynth = Synth.new("tutorial");

    //Must *add* the synth to the server:
    SynthDef.new("Blah",{arg pitch = 440; var outArray;
	    outArray = [SinOsc.ar(pitch,0,0.2), SinOsc.ar(pitch+2,0,0.2)];
    	Out.ar(0,outArray);
    }).add;

    //then play it: *args can be symbols* eg: \pitch
    b = Synth.new("Blah", [ "pitch", 220 ])
    //combine with busses/groups:
    //can also use .moveBefore, .moveAfter, .moveToHead, .movetoTail
    c = Synth.after(b,"Blah",["pitch",220]); 
    //Synth.head/tail/before/after/replace
    //modification
    b.set("pitch",220) ;
    //then kill it
    b.free;
    #+end_src    

    For feedback, use InFeedback.ar
    
*** UGens

**** Oscillators:
     #+begin_src sclang
     //Eg:
     { SinOsc.ar(440, 0, 0.5) }.play;
     #+end_src

     SinOsc.ar/kr (freq, phase, amp, add)
     PinkNoise.ar/kr (mul,add)
     Saw.ar/kr (freq,mul,add)
     Formant.ar (fundfreq,formfreq,bwfreq,mul,add)
     LFSaw.ar/kr (freq,iphase,mul,add)
     VarSaw.ar/kr (freq,iphase,width,mul,add)
     LFPulse.ar/kr (freq,iphase,width,mul,add)
     Impulse.ar/kr (freq,phase,mul,add)
     SyncSaw.ar/kr (syncFreq,sawFreq,mul,add) // careful
     DWGPlucked.ar/kr(freq, amp, gate, pos, c1, c3, inp, release)
 
**** Buffer Playback:
     #+begin_src sclang
     //EG:
     ~buffer = Buffer.read(s, File.getcwd +/+ "aSound.aif");
     { PlayBuf.ar(1, ~buffer, 1); }.play;
     #+end_src

     PlayBuf.ar(numChannels, buffer, rateOfPlayback) //rate: -n <-> n
     BufRateScale.kr(buffer)
     RecordBuf.ar(source,buffer)
     DiskIn.ar //Streaming

**** Effects:
     Pan2.ar/kr (in, pos,level)
     Mix.ar (array)
     Decay2.ar/kr (in, attackTime, decayTime, mul, add)
     AllpassC.ar/kr (in, maxDelaytime, delaytime, decaytime, mul, add)
     
**** Envelopes
     EnvGen.ar/kr (envelope, gate, levelScale, levelBias, timeScale, doneAction)
     Env.perc/triangle/sine/xyc/pairs/step/cutoff/dadsr/adsr/asr/circle
     Env.linen(attackT, sustainT, releaseT, level, curve)

**** I/O
     Out.ar/kr (busNum, numChannels)
     In.ar/kr  (busNum, numChannels)
     InFeedback.ar

**** Noise
     Rand(low,high)
     White/Brow/PinkNoise
     Crackle
     LFNoise0/1/2
     Dust/Dust2

**** Math
     Clip.ar/kr (input, min, max)
     Fold
     InRange
     InRect
     Integrator
     LeastChange
     LinExp
     LinLin
     ModDif
     MostChange
     MulAdd
     RunningMax
     RunningMin
     Runningsum
     Schmidt
     Slope
     TrigAvg
     Wrap

*** Busses
    #+begin_src sclang
    //For Routing audio
    b = Bus.control(server, numChannels=1)
    b = Bus.audio(server, numChannels=1)

    b = Bus.audio(s)
    b.index 
    b.numChannels
    b.free

    //can map any synth arg to read from a control bus
    x.map(\freq1,b,\freq2, c)

    //can also set/get constant values to a bus
    b.get({ |val| val.postln; });
    b.set(30)
    // set the synth to a constant value, unmapping from control
    x.set(\freq2, 100)
    #+end_src


*** Groups
    #+begin_src sclang
    g = Group.new;
    h = Group.before(g);
    g.free; h.free;
    //creating a new synth in a group
    Synth(\tutorial..,[\inBus,b],g)
    // sends set message to all nodes inside group
    g.set(\amp,0.005) 
    #+end_src
*** Buffers
    #+begin_src sclang
    b = Buffer.alloc(server,frames,channels)
    //8 second long buffer:
    b = Buffer.alloc(s,s.sampleRate * 8.0, 2) 
    b = Buffer.read(s, "/path/to/file.wav")

    //Play the buffer:
    ({Out.ar(0,PlayBuf.ar(1,b,BufRateScale.kr(b)))}).play;
    
    //for streaming:
    b = Buffer.cueSoundFile(s,filePath, 0, 1)

    //Buffers can get and set data, but interleave frames for multichannel.
    //so i: 0=f1-chan1, 1=f1-chan2, 2=f2-chan1...
    //get is asynch
    #+end_src
*** Classes
    *method = class method
    'this' refers to instance
    *NEEDS TO BE IN ~/github/.super_collider_classes*
    *or Platform.userExtensionDir*
    
    #+begin_src sclang
    MyClass {
    	var <a,>b,<>c; //get,set,both
        classvar blah;

		*new { ^super.new }
    }
    #+end_src





*** Syntax Shortcuts
**** Dereferencing / List expansion
     use *(1..5) -> 1,2,3,4,5  in function parameters
     #+begin_src sclang
       a = (1..3)
       {|x, y, z| (x + y + z) }.value(*a);
     #+end_src

**** Multiple assignment
     #+begin_src sclang
     #a,b,c = [1,2,3]
     #[a,b,c] = [1,2,3]
     #+end_src
**** Series assignment
     #+begin_src sclang
     a = (start,next..end)
     #+end_src

**** Geometry
     #+begin_src sclang
     2 @ 3 : Point(2,3)
     point @ point : rectangle, top left -> bottom right
     
     rect & rect : intersection of rectangles
     rect | rect : union of rectangles
     
     Color.rand
     #+end_src

**** list comprehension
     #+begin_src sclang
     //defined as routines:
     {: x, x <- (1..5) }
     {: [x,y], x <- 2, y <- (1..5), (x+y).isprime }
    
     //use 'all' to get the values out:
     all {:x, x <- (1..5) }

     //generator clauses: v <- e
     //var clauses: var v = e
     //expression clauses: :: e
     //termination clause: :while e
     #+end_src
*** Variables
    defined with 'var' after the open curly bracket
    of a function.
    
    ~varName -> create an environment variable
    //Environments allow for stack control of variables?
    (Environment.new.push; currentEnvironment.pop;)

    Globals can only be single letter variables
    
*** Functions
    #+begin_src sclang
    a = { arg a; a + 2 }
    a = {|a| a + 2}
    a.value(2) // 4
    //Functions return the last value eval'd.
    //Methods return with ^
    #+end_src

*** Functional programming
    #+begin_src sclang
    a = {|x| x + 2 };
    //Map:
    (1..5).collect(a);

    //Filter:
    (1..5).select({|x| x > 2 });
    (1..5).reject({|x| x > 2 });

    //Side effect:
    (1..5).do({|x| x.postln; });

    //Zip / Laminate
    (1..5) +++ (1..5)

    //Reduce
    (1..5).reduce({|x, y| x * y)
    #+end_src
*** Operators
    == : Equivalance
    === : identity
    & : bitwise and
    bitwise or: |
    << : bitwise left
    >> : bitwise right
    && : logical and
    logical or: ||

    ++ : concatenation
    +++ : lamination (repeating combination/pairing). ie: Zip

    @ : array indexing (.at)
    @@ : array index with wrapping (.wrapAt)
    @|@ : array index with folding (.foldAt)
    |@| : array index with clipping (.clipAt)

    <> : function composition (going RIGHT to LEFT)

*** GUI
    #+begin_src sclang
      w = Window.new("GUI Introduction", Rect(200,200,255,100));
      b = Button.new(w,Rect(10,0,80,30)).states_([["Hide"],["Show"]]);
      s = Slider.new(w,Rect(95,0,150,30));
      c = CompositeView.new(w,Rect(20,35,100,60));
      StaticText.new(c,Rect(0,0,80,30)).string_("Hello");
      StaticText.new(c,Rect(20,30,80,30)).string_("World!");
      b.action = { c.visible = b.value.asBoolean.not };
      s.action = { c.bounds = Rect( s.value * 150 + 20, 35, 100, 100 ) };
      w.front;
    #+end_src

**** Window
     Window.screenBounds
     Display with window.front;
    
     Window display can be automated with:
     window.view.decorator = FlowLayout(window.view.bounds);

     Windows can also have layouts:
	 wind.layout_(HLayout(button, VLayout(button2, Button())));
    
**** Button
     b = Button.new(parent, Rect(0,0,100,100).states([["One"], ["Two"]]);
     b.action_( "test".postln;)
    
*** IO
    #+begin_src sclang
    File.getcwd
    File.use(File.getcwd +/+ "aFile.sc", "r", {});
    #+end_src
*** Control Flow
    -- :results output/value
    #+begin_src sclang
    if ( x, { then }, { else })
    while (testFunc, bodyFunc);
    while { (a=something) } { use a... }
    for (startVal, endVal, func);
    forBy(start, end, step, func);
    do(collection, function)
    switch(val, testVal1, trueFunc1,
			testValN, trueFuncN,
			defaultFunc);
    #+end_src
*** Timing
**** Clocks
     #+begin_src sclang
     //Tempo/System/App -Clock
     //System/App are in seconds
     
     SystemClock.sched(5,{"hello".postln;}); 

     var timeNow = TempoClock.default.beats;
     TempoClock.default.tempo = 2; // 2 beats / sec
     TempoClock.default.schedAbs(timeNow+5, {..});
     TempoClock.default.schedAbs(TempoClock..default.nextBar, { TempoClock.beatsPerBar = 3; });
     TempoClock.default.tempo = 2;
     //The length in seconds of a beat
     //useful for converting to seconds for envelopes
     TempoClock.default.beatDur

     thisThread.clock.beats;
     //returning a number shedules a repeat:
     SystemClock.sched(5,{"hello".postln; 2})
     #+end_src
**** Scheduling
     #+begin_src sclang
     //Routines and yield
     r = Routine({
     "a".yield;
     "b".yield;
     "c".yield;
     });
     
     //return numbers for clock based rescheduling:
     r = Routine({
	 loop {
		 "something".postln;
    	 rrand(1,3).yield;
     	}
      });
 
      //creating scheduled sound:
      r = Routine({
	  loop{
	  var pitch = rrand(400,800),
	  wait = rrand(0.5,2);
	  ({SinOsc.ar(pitch,0,0.2) * EnvGen.kr(Env.perc(0.01,0.4), doneAction: 2)}).play;
	  wait.yield;
	  }
      });

      TempoClock.default.sched(0,r)
      //or:
      r.play
      r.stop

     #+end_src
**** Tasks
     #+begin_src sclang
     //A more controllable routine, pausable
     //can use ".wait" in place of ".yield"
     t = Task({
	 var i = 0, n = [440,560,880];
	 loop {
	 //note the folding at operator:
	 ({ SinOsc.ar(n @|@ i,0,0.2) * EnvGen.kr(Env.perc(0.01,0.2), doneAction: 2);}).play;
	 i = i + 1;
	 0.5.wait;
	 }
     });
     #+end_src
**** Synchronized timing:
     #+begin_src sclang
     aRoutine.play(clock,quant)
     aRoutine.play(argClock, doReset, quant)
     //Specify a clock, whether to reset to start, 
     //and exact start time. 
     quant = [bar length,phase]
     //where u and v are tasks
     u.play(c,true,2);
     v.play(c,true,[2,0.5]);
     //When dealing with latency, wrap messages 
     //to the server with 'makeBundle':
     s.makeBundle(s.latency, {...});
     #+end_src
*** Patterns
    Streams have .next and .reset
    Patterns create streams
    Can collect, select, reject on patterns to modify.
    
    #+begin_src sclang
    a = Pseq([1,2,3,4,5], 1).asStream
    while { (m=a.next).notNil } {m.postln };
    #+end_src
    
    Patterns can be concatenated with ++
    and composed with <>
    played,
    collected, selected, rejected

    Pfunc(function)
    Prout(function) //to create routines
    Pseq (list, repeats, offset)
    Pshuf (list, repeats)
    Prand (list, repeats)
    //Exclusive random:
    Pxrand (list, repeats)
    //weighted random:
    Pwrand (list, weights, repeats)
    //-----
    Pseries (start, step, length)
    Pgeom (start, grow, length)
    Pwhite (lo, hi, length)
    Pexprand (lo, hi, length)
    //---- Filter Patterns
    //repeat a pattern as many times as necessary:
    Pn(pattern, repeats)
    //repeat ind values n times:
    Pstutter (n, pattern)
    //can use patterns inside of other patterns:
    p = Pwhite(0.0, Pseries(0.01,0.01,inf), 100)
    //Parallel event patterns, with duration
    Ppar(list) 
    
**** Pbind
     //Pbind combines elements from patterns
     //into *key-value* events to pass to a synth


     //Create an instrument \smooth
     //and trigger repeatedly
     #+begin_src sclang
     p = Pbind(
     	\instrument, \smooth,
        \midinote, Pseq([60, 72, 71], 1),
        \dur, Pseq([2, 2, 1], 1)
     ).play;
     #+end_src

*** Events
    #+begin_src sclang
    //Key-value pairs:
    //can also specify synth with \instrument
    e = (note:26, amp:0.1)
    //have prototypes for performance:
    e.play
    #+end_src

    Event Keys:
    \server,
    \instrument,
    \group,
    \addAction,
    \out

    \amp, \db, \pan, \velocity, \trig

    \tempo, \dur, \stretch,
    \legato, \sustain, \lag,
    \timingOffset,
    \strum, \strumEndsTogether,
    \sendGate

    \freq, \midinote, \note, \degree

    Modal, gamut, chromatic transposition:
    \mtranspose, \gtranspose, \ctranspose

    \root, \harmonic, \detune, 
    \midiToCps
    \octave, \degree, \scale,
    \octaveRatio

    \note, \midinote, \freq, \detunedFreq
   


*** Rests
    #+begin_src sclang
    (
    // first, pitches ascending by 1-3 semitones, until 2 octaves are reached
    var pitches = Pseries(0, Pconst(24, Pwhite(1, 3, inf)), inf).asStream.all,
    // randomly block 1/3 of those
    mask = pitches.scramble[0 .. pitches.size div: 3];

    p = Pbind(
    \arpeg, Pseq(pitches[ .. pitches.size - 2] ++ pitches.reverse[ .. pitches.size - 2], inf),
    // if the note is found in the mask array, replace it with Rest
    // then that note does not sound
    \note, Pif(Pfunc { |event| mask.includes(event[\arpeg]) }, Rest, Pkey(\arpeg)),
    \octave, 4,
    \dur, 0.125
    ).play;
    )
    #+end_src
*** Done Actions

Done.ar/kr

pauseSelf
freeSelf
freeSelfAndPrev
freeSelfAndNext
freeSelfAndFreeAllInPrev
freeSelfAndFreeAllInNext
freeSelfToHead
freeSelfToTail
freeSelfPausePrev
freeSelfPauseNext
freeSelfAndDeepFreePrev
freeSelfAndDeepFreeNext
freeAllInGroup
freeGroup

*** Data Structures
    
**** Array 
     Fixed Size

**** List 
     Variable Size. Uses 'add','pop','addFirst', insert,removeAt
     into pairs: .pairsDo(f)

**** Dictionary 
     uses [ ] and .at access, 
     can take strings, symbols, objects...

**** PriorityQueue
     .put(time, item), .pop, .topPriority, .clear

**** Set, Bag, IdentityBag

****  MultiLevelIdentityDictionary.new
     #+begin_src sclang
     m = MultiLevelIdentityDictionary.new
     m.put(\a, \b, \c, "blah")

     m.treeDo(
     {|x| ("Branch: " + x).postln}, 
     {|x, y| ("LeafPath: " + x + " Leaf: + y).postln; },
     {|x| ("Arg: " + x).postln; },
     {|x| ("Post Branch: " + x).postln})
     #+end_src

**** Sets
Set.new
set.add
set & set : intersection
set | set : union
set - set : difference
set -- set : symmetric different

*** MIDI Out
    #+begin_src sclang
      MIDIClient.init
      MIDIClient.destinations
      a = MIDIOut.new(0)

      TempoClock.default.clear
      TempoClock.default.tempo = 1
      TempoClock.default.schedAbs(TempoClock.default.nextBar, { TempoClock.default.beatsPerBar = 3; })

      TempoClock.default.schedAbs(TempoClock.default.nextBar, {
    	  "Playing".postln;
    	  a.noteOn(1, 60, 60);
    	  1;
      });
    #+end_src

    A Midi pattern:
    #+begin_src sclang
    p = Pbind(
    \type, \midi,
        // this line is optional b/c noteOn is the default
        // just making it explicit here
    \midicmd, \noteOn,
    \midiout, mOut,    // must provide the MIDI target here
    \chan, 0,
        // degree is converted to midinote, not just frequency
    \degree, Pwhite(-7, 12, inf),
    \dur, Pwrand([0.25, Pn(0.125, 2)], #[0.8, 0.2], inf),
    \legato, sin(Ptime(inf) * 0.5).linexp(-1, 1, 1/3, 3),
    \amp, Pexprand(0.5, 1.0, inf)
    ).play(quant: 1);
    #+end_src



*** OSC
    In:
    #+begin_src sclang
    thisProcess.openUDPPort(7772);
    thisProcess.openPorts
    n = NetAddr("127.0.0.1", 7772);
    o = OSCFunc({ |msg, time, add, recvPort| msg.postln; }, '/test');
    o.free; n.free;
    #+end_src


    Out:
    #+begin_src sclang
    n = NetAddr("127.0.0.1", 7771);
    b.sendMsg("/hello", "there");
    b.free; n.free;
    #+end_src

*** Scales
    #+begin_src sclang
    a = Scale.major, minor etc
    #+end_src
    List using Scale.directory
*** Useful Examples
**** Useful Patterns
     Play an ascending and descending major scale, with root=A
     #+begin_src sclang
     a = Scale.major;
     Pbind(\root, -3, \scale, a, \degree, Pseq((0..7) ++ (6,5..0))).play
     #+end_src

     Use Pbind to create events:

     #+begin_src sclang
     //Arrays play in parallel,
     p = Pbind(\root, 0, \scale, Scale.major, \degree, Pseq([1,2,3,4,2]));
     #+end_src

     Use Pbindf to add or change an existing pattern:
     #+begin_src sclang
     q = Pbindf(p, \root, 4);
     #+end_src

     Use Ppar to play in parallel:
     #+begin_src sclang
     Ppar([q, r]);
     #+end_src

     
     #+begin_src sclang
     p = Pbind(
     \type, \midi,
     \midicmd, \noteOn,
     \midiout, m,    
     \chan, 0,
	 \mtranspose, -24,
	 \root, 0,
	 \scale, Scale.chromatic,
	 \amp, Pbeta.new(0.2, 0.8, 1.2, 1.2,));
     
     //\degree, [1,2,3]
     //\dur, Pwrand([0.25, Pn(0.125, 2)], #[0.8, 0.2], inf),
     //\legato, sin(Ptime(inf) * 0.5).linexp(-1, 1, 1/3, 3),
     //\amp, Pexprand(0.5, 1.0, inf)

     ~monoP = Pbindf(p, \legato, 1)
     q = Pbindf(p, \degree, Pseq([[1, 5], [4, 9]]), \dur, Pseq([1,1,0.5,1, Pn(0.5, 3)]))


     #+end_src

     Pfsm example:
     #+begin_src sclang
     a = Pfsm([
	 #[0], //Start States 
	 Pseq([0,12,4,0]), #[1], //S0, -> S1
	 Pseq([4,4,5,5]), #[2], //S1 -> S2
	 Pseq([4,1,4,3,1]), #[3], //S2 -> S3
	 Pseq([5,6,8,9,1,0]), #[4,3,2], //S3 -> S4/3/2
	 nil, nil //S4 : Terminal
     ]);
     #+end_src






     
**** Misc
     #+begin_src sclang
     8.rand //generate random number from 0-8
     #[1,2,3] //literal, constant array
     Ref.new(a) //create a reference to a
     [1,2,3,4].choose // random num from array
     10.do({|x| "hello".postln}) //no returns
     x ! n // create array of x, n times
     #+end_src


** scsynth
   TODO
   
** emacs specific:
   C-c C-o         sclang-start
   C-c C-c         sclang-eval-region-or-line
   C-c C-f         Eval file

   C-c C-s         stop sounds
   C-c C-p f       Free all
   C-c C-y         open sc help

   C-c RET         List Arguments for a method. eg: SinOsc.ar(
   C-c C-n         Complete Symbol

   C-c {           Dump Interface

   C-c :           find definition
   C-c ;           find references

** Useful Debugging / Introspection

   #+begin_src sclang
   // dumps information about the class/type, 
   "test".dump
   // get the class type
   "test".class
   // opens up a detailed inspector
   "test".inspect
   //prints all methods the class can respond to
   "test".class.dumpInterface 
   //Gui Scope a Synth:
   SynthDef(\Test, { Out.ar(0, SinOsc.ar(440, 0, 0.5)); })
   //all instance variable names of a class
   Server.instVarNames.dump
   //
   "test".class.findMethod("blah")
   SynthDef... .dumpUGens
   // get info on the interpreter
   this.dump 
   currentEnvironment.clear
   //Gui Plot an Environment
   Env.linen(0.1, 0.2, 0.1, 0.6).test.plot
   //Open up gui help. 
   thisProcess.showHelpBrowser
   //Show Guis:
   Stethoscope.new(nil, 1, 0, 4096, 1, \audio, nil, 0);
   FreqScope.new()
   //OSC Debugging:
   OSCFunc.trace(true);
   //Finer OSC Debugging:
   f = { |msg, time, addr|
   if(msg[0] != '/status.reply') {
   "time: % sender: %\nmessage: %\n".postf(time, addr, msg);
   }
   };
   thisProcess.addOSCRecvFunc(f);
   thisProcess.removeOSCRecvFunc(f);


   #+end_src

** Building Supercollider
   From source requires a couple of things:
   install the dependencies, ensure qt55,
   temporarily modify the path to point to where brew link qt55 suggests
   make sure you run:
   
   git submodule init
   git submodule update

   to install yaml-cpp
   otherwise follow the instructions

