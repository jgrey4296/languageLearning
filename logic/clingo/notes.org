* Answer Set Programming
  #+STARTUP: content
  [[https://potassco.org/][Potassco]]

** Examples                                                                     :sandbox:
   #+NAME: Example
   #+begin_src clingo :results output
   n(4).
   sizes((rows;columns), N) :- n(N).
   board(X,Y) :- sizes(rows,A), sizes(columns,B), X=1..A, Y=1..4.
   %boardSize(S) :- n(Q), NS=Q*Q, S=#count { board(X,Y) : board(X,Y) }, S=NS.
   boardSize(S) :- S= #count { board(X,Y) : board(X,Y) }.
   :- not boardSize(_).
   :- boardSize(S), n(N), NS=N*N, S!=NS.
   #show boardSize/1.
   #+end_src

   #+NAME: for testing ob-clingo
   #+HEADER: :clingo-args -n 4
   #+begin_src clingo :results output
   1{a(1..5)}2.

   #+end_src

   #+RESULTS: for testing ob-clingo
   #+begin_example
   clingo version 5.4.0
   Reading from ...cqc0000gn/T/babel-g9GaMj/clingo-uAxkDE
   Solving...
   Answer: 1
   a(5)
   Answer: 2
   a(3)
   Answer: 3
   a(3) a(5)
   Answer: 4
   a(4)
   SATISFIABLE

   Models       : 4+
   Calls        : 1
   Time         : 0.001s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
   CPU Time     : 0.001s
   #+end_example

** Syntax
   Syntax is a DSL of prolog
*** Facts                                                                       :syntax:
    #+NAME: Facts
    #+begin_src clingo :results output
    %%Simple values:
    a. b. c.
    %%Compound:
    a(1).
    something(else).
    %%Ranges:
    a(1..3).
    #+end_src

    #+RESULTS: Facts
    #+begin_example
    clingo version 5.4.0
    Reading from ...cqc0000gn/T/babel-Kew90P/clingo-twnqOl
    Solving...
    Answer: 1
    a(1) a(2) a(3) a b c something(else)
    SATISFIABLE

    Models       : 1
    Calls        : 1
    Time         : 0.002s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
    CPU Time     : 0.002s
    #+end_example

*** Negation                                                                    :syntax:
    #+NAME: Negation Examples
    #+begin_src clingo :results output
    a.

    %% Default Negation:
    c :- not b.

    %% Classical Negation:
    d :- -b.

    #+end_src

    #+RESULTS: Negation Examples
    #+begin_example
    clingo version 5.4.0
    Reading from ...cqc0000gn/T/babel-Kew90P/clingo-Z58OEI
    Solving...
    Answer: 1
    c a
    SATISFIABLE

    Models       : 1
    Calls        : 1
    Time         : 0.001s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
    CPU Time     : 0.001s
    #+end_example

*** Rules                                                                       :syntax:
    #+NAME:
    #+begin_src clingo :results output
    %% then : if.
    head :- body.

    %% Conjunctions:
    head :- body, body, body.
    %% Disjunctions:
    head :- body; body.

    %% Exclusions:
    :- body.

    %% Conditions ':' provide set-like construction.
    %% OR on lsh, AND on rhs.
    meet :- available(X) : person(X).
    on(X) : day(X) :- meet.

    %% becomes:
    meet :- available(jane), available(john).
    on(mon) | on(tue) | on(wed) | on(thu) | on(fri) :- meet.

    #+end_src

    #+NAME: Disjunction Test
    #+begin_src clingo :results output :clingo-models 5 :c-W all :clingo-output-debug all
    { a(1..4) }.
    c :- 1{ a(1;2) }.
    :- not c.
    #+end_src

    #+RESULTS: Disjunction Test
    #+begin_example
    clingo version 5.4.0
    Reading from ...cqc0000gn/T/babel-Kew90P/clingo-iGcCFr
    Solving...
    Answer: 1
    a(2) c
    Answer: 2
    a(2) a(4) c
    Answer: 3
    a(2) a(3) c
    Answer: 4
    a(2) a(3) a(4) c
    Answer: 5
    a(1) c
    SATISFIABLE

    Models       : 5+
    Calls        : 1
    Time         : 0.002s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
    CPU Time     : 0.002s
    #+end_example


*** Constraints                                                                 :syntax:
    #+NAME: Cardinality Constraints
    #+begin_src clingo :results output
    %% lowNum { fact } highNum.

    %%Optional rule eval:
    { head } :- body.

    %% Generate specific numbers of head
    { head } = 1 :- body.
    2{ head : body }3.

    %% Success on day X if ther are 2 people alive on that day
    success(X) :- day(X), Z=#count { Y : alive_on(X,Y) }, Z>0.

    %Rule: success if there is at least 1 person who is alive
    success :- 1{ alive_on(_,X) : person(X) }3.

    %% succcess on all days if for each day there is a success
    succ_on_all_days :- success(X) : day(X).



    %% Create n variations of 'test(x, Y).'
    %% to fill with all values of Y results in size(y) * n facts
    { test(X, Y) : a(X) } = n :- b(Y).

    x(1..3).
    y(1..3).
    loc(X,Y) :- x(X), y(Y).
    time(5).
    %% for each T, create a single move, fill with X,Y where x > Y
    { move(X,Y,T) : x(X), y(Y), X > Y } = 1 :- time(Q), T=1..Q.
    #+end_src

    #+RESULTS: Constraints
    #+begin_example
    clingo version 5.3.0
    Reading from ...kbh0000gq/T/babel-ayz92g/clingo-n62wE8
    Solving...
    Answer: 1
    x(1) x(2) x(3) y(1) y(2) y(3) loc(1,1) loc(2,1) loc(3,1) loc(1,2) loc(2,2) loc(3,2) loc(1,3) loc(2,3) loc(3,3) time(5) move(3,1,1) move(2,1,2) move(2,1,3) move(2,1,4) move(2,1,5)
    SATISFIABLE

    Models       : 1+
    Calls        : 1
    Time         : 0.003s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
    CPU Time     : 0.003s
    #+end_example

*** Aggregates                                                                  :syntax:
    #+NAME: Aggregates
    #+begin_src clingo :results output
    %% count all a's.
    %% As between the {} is a set, make sure each entry is unique
    a(1..4).
    a_count(X) :- X = #count { Y : a(Y) }.

    a(3).
    b(X,Y) :- a(S), X = 1..S, Y= 1..S.
    b_count(X) :- X = #count { temp(Q,R) : b(Q,R) }.

    #+end_src

    #+RESULTS: Aggregates
    #+begin_example
    clingo version 5.3.0
    Reading from ...kbh0000gq/T/babel-ayz92g/clingo-ZF9LMT
    Solving...
    Answer: 1
    a(3) a(1) a(2) a(4) a_count(4) b(1,1) b(2,1) b(3,1) b(1,2) b(2,2) b(3,2) b(1,3) b(2,3) b(3,3) b(4,1) b(4,2) b(4,3) b(1,4) b(2,4) b(3,4) b(4,4) b_count(16)
    SATISFIABLE

    Models       : 1
    Calls        : 1
    Time         : 0.002s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
    CPU Time     : 0.002s
    #+end_example

    #+NAME: Sum example
    #+begin_src clingo :results output
    node(1). node(3). node(5).
    weight(1..5).
    summed(X) :- X = #sum{ Y, weight(Y) : node(Y) }.

    #show summed/1.
    #+end_src

    #+RESULTS: Sum example
    #+begin_example
    clingo version 5.3.0
    Reading from ...kbh0000gq/T/babel-ayz92g/clingo-1tNp1W
    Solving...
    Answer: 1
    summed(9)
    SATISFIABLE

    Models       : 1
    Calls        : 1
    Time         : 0.002s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
    CPU Time     : 0.002s
    #+end_example

    #+NAME: Max Aggregate Example
    #+begin_src clingo :results output :clingo-models 5 :c-W all :clingo-output-debug all
    3{ test(1..6) }.
    the_max(X) :- X = #max { Y : test(Y) }.
    #+end_src

    #+RESULTS: Max Aggregate Example
    #+begin_example
    clingo version 5.4.0
    Reading from ...cqc0000gn/T/babel-Kew90P/clingo-MoMVNr
    Solving...
    Answer: 1
    test(1) test(2) test(3) the_max(3)
    Answer: 2
    test(1) test(2) test(4) the_max(4)
    Answer: 3
    test(1) test(3) test(4) the_max(4)
    Answer: 4
    test(2) test(3) test(4) the_max(4)
    Answer: 5
    test(1) test(2) test(3) test(4) the_max(4)
    SATISFIABLE

    Models       : 5+
    Calls        : 1
    Time         : 0.010s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
    CPU Time     : 0.010s
    #+end_example


*** Const
    #+NAME: Const Example
    #+begin_src clingo :results output :clingo-models 5 :c-W all :clingo-output-debug all
    #const value = 5.
    a(value).
    #+end_src

    #+RESULTS: Const Example
    #+begin_example
    clingo version 5.4.0
    Reading from ...cqc0000gn/T/babel-Kew90P/clingo-xwF5xD
    Solving...
    Answer: 1
    a(5)
    SATISFIABLE

    Models       : 1
    Calls        : 1
    Time         : 0.001s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
    CPU Time     : 0.001s
    #+end_example


*** Display                                                                     :syntax:
    #+NAME: Display examples
    #+begin_src clingo :results output
    a. b. c.
    test(X,Y) :- X = a, Y = b.

    %%use #show, and specify predicate and arity:
    #show a/0.
    #show test/2.

    #+end_src

    #+RESULTS: Display examples
    #+begin_example
    clingo version 5.3.0
    Reading from ...kbh0000gq/T/babel-ayz92g/clingo-hAYYaA
    Solving...
    Answer: 1
    a test(a,b)
    SATISFIABLE

    Models       : 1
    Calls        : 1
    Time         : 0.001s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
    CPU Time     : 0.001s
    #+end_example

** Heuristics                                                                   :guidelines:
   only atoms appearing in some head can appear in answer sets.

   there are no answer sets that satisfy all literals in integrity constraint.
   thus you are defining situations you don't want.

   Try not to use Or: "|"

   #minimize optimize a set

*** Safety                                                                      :safety:
    gringo expects rules to be safe.
    ALL VARIABLES that appear in a rule have to appear in some POSITIVE LITERAL
    in the body, thus binding the variable to some existing constant.

** CLI Usage:                                                                   :reference:
   clingo -Wall -n 1 --rand-freq=0.5 --verbose=3 test_map.lp
   clingo -n 100 --restart-on-model --heu=vsids --rand-freq=0.01
   clingo --time-limit=10 ...
*** CLI JSON                                                                    :json:
    clingo -outf=2 -n5 * > *.out
*** Exit Codes                                                                  :exit_codes:cli:
    Based  on [[https://www.mat.unical.it/aspcomp2013/files/aspoutput.txt][ASP Output]]

    Solvers produce output using two channels:
    exit codes and
    standard output.

    Exit codes are used primarly to distinguish succesful runs from
    unsuccesful ones; in case a run was successful, the exit code provides
    semantic information about the run.  On the other hand, standard output
    is used to report answer(s) to the given problem instance, e.g.,
    solutions to problems, enumerations thereof, etc.  Solvers may write
    warnings, statistics, debug and any additional information on stdout
    using comment lines.

**** Output of an Answer Set Solver *
     |--------------+-------------------------------------------------------------------------------|
     | Delimiter    | Meaning                                                                       |
     |--------------+-------------------------------------------------------------------------------|
     | ANSWER       | Solution found, next line(s) contains answer (+ costs)                        |
     |--------------+-------------------------------------------------------------------------------|
     | COST         | The cost of the solution in the previous line                                 |
     |--------------+-------------------------------------------------------------------------------|
     | INCONSISTENT | Program is inconsistent                                                       |
     |--------------+-------------------------------------------------------------------------------|
     | UNKNOWN      | No solution has been found yet                                                |
     |--------------+-------------------------------------------------------------------------------|
     | OPTIMUM      | The solution preceding and the solutions succeeding this delimiter are optima |
     |--------------+-------------------------------------------------------------------------------|
     | %            | The rest of the line is a uninterpreted comment                               |
     |--------------+-------------------------------------------------------------------------------|

**** Exit Code Bit Encoding
     Each exit code represents a possibly successful run of a
     solver/grounder: based on the exit status, the end user should be able
     to answer decision problems without parsing the output, or decide
     whether something went wrong or no solution could be found.

     Exit codes must fit within the lowest 8 bits of an integer.

     The status values 10 and 20 encode satisfiable and unsatisfiable instances.

     This gives the following bit patterns for satisfiable and unsatisfiable
     runs: 00001010 resp. 00010100.  Furthermore, SAT/QBF solvers may exit
     without a known solution (e.g., when they have hit the time/memory
     limit), but their exit status do not agree with these kind of runs.

     As ASP solvers usually implement many different computational problems,
     three exit codes are not enough to give us all information on the exit
     status of a solver.  For this reason, we use the following bit scheme to
     encode the status of a ground/solver run.

     |-------+-------+--------+---------+-------+---------+-------+-------|
     | bit 7 | bit 6 | bit 5  | bit 4   | bit 3 | bit 2   | bit 1 | bit 0 |
     |-------+-------+--------+---------+-------+---------+-------+-------|
     | NORUN | RES   | ALLOPT | EXHAUST | SAT   | EXHAUST | SAT   | INT   |
     |-------+-------+--------+---------+-------+---------+-------+-------|

     NORUN signals the computation was not started. eg: Syntax error.
     Thus EC is 128

     INT encodes termination by signal. ie: Interrupted.

     Successful grounding runs have exit code 0.

     SAT bit encodes that the solver found at least one solution.

     EXHAUST flag signals the solver exhaustively went through the search space.

     ALLOPT flag signals all optimal solutions have been found.

     RES is not specified, it is reserved for future use,
     and must be set to 0 whenever INT is 0.

     |-----------+-------------------------------------------------------------------------------------------|
     | Exit code | Meaning                                                                                   |
     |-----------+-------------------------------------------------------------------------------------------|
     |         1 | Run interrupted: No solution has been found so far                                        |
     |-----------+-------------------------------------------------------------------------------------------|
     |        10 | Program is consistent / some consequences exist / query is true                           |
     |-----------+-------------------------------------------------------------------------------------------|
     |        11 | Run interrupted: Program is consistent / some consequences exist                          |
     |-----------+-------------------------------------------------------------------------------------------|
     |        20 | Program is inconsistent / query is false                                                  |
     |-----------+-------------------------------------------------------------------------------------------|
     |        30 | Program is consistent, all possible solutions/consequences enumerated / some optima found |
     |-----------+-------------------------------------------------------------------------------------------|
     |        31 | Run interrupted: Program is consistent / some optima found                                |
     |-----------+-------------------------------------------------------------------------------------------|
     |        62 | Program is consistent / all possible optima found                                         |
     |-----------+-------------------------------------------------------------------------------------------|
     |       128 | Syntax error / command line arguments error                                               |
     |-----------+-------------------------------------------------------------------------------------------|

     The following table summarises the expected behaviour of a solver when
     interrupted by one of the following (standard) termination signals:

     |-------------+------------------+---------------------------------+-------------|
     | Reason      | Default action   | Expected action                 | Description |
     |-------------+------------------+---------------------------------+-------------|
     | SIGHUP (1)  | exit(129)        | exit(1) or exit(11) or exit(31) | kill -HUP   |
     | SIGINT (2)  | exit(130)        | exit(1) or exit(11) or exit(31) | Ctrl-C      |
     | SIGQUIT (3) | exit(131) + core | exit(1) or exit(11) or exit(31) | Ctrl-\      |
     |-------------+------------------+---------------------------------+-------------|

     Further signals are relevant in the context of the ASP Competition 2013.
     Here, different signals encode the reason for solver termination.

     |--------------+------------------+---------------------------------+-----------------------------------------------------|
     | Reason       | Default action   | Expected action                 | Description                                         |
     |--------------+------------------+---------------------------------+-----------------------------------------------------|
     | SIGKILL (9)  | exit(137)        | cannot be changed               | sent when process(es) continue to run after timeout |
     | SIGSEGV (11) | exit(139)        | exit(1) or exit(11) or exit(31) | sent when memout is reached, or programming error   |
     | SIGTERM (15) | exit(143)        | exit(1) or exit(11) or exit(31) | sent at most 10 secs after timeout                  |
     | SIGXCPU (24) | exit(152) + core | exit(1) or exit(11) or exit(31) | sent when timeout is reached                        |
     | SIGXFSZ (25) | exit(153) + core | exit(1) or exit(11) or exit(31) | sent when max filesize is reached                   |
     |--------------+------------------+---------------------------------+-----------------------------------------------------|
** Babel Usage
   Clingo can be used in babel source blocks.

   CLI arguments can be passed in a header:
   #+HEADER: :c-n 5

   Or in the src block:
   #+begin_src clingo :results output :clingo-models 5 :c-W all :clingo-output-debug all

   #+end_src

** Sandbox

   #+NAME: Rain and Sprinklers
   #+begin_src clingo :results output :clingo-models 5 :c-W all :clingo-output-debug all
   0 { rain;sprinkler;summer } 1.
   %:- rain, sprinkler,summer.
   wet(rain) :- rain.
   wet(sprinkler) :- sprinkler.
   dry :- not wet(_).
   -dry :- wet(_).
   %%:- not wet(_).
   #+end_src

   #+RESULTS: Rain and Sprinklers
   #+begin_example
   clingo version 5.4.0
   Reading from ...cqc0000gn/T/babel-Kew90P/clingo-RQR2Fx
   Solving...
   Answer: 1
   dry
   Answer: 2
   dry summer
   Answer: 3
   wet(rain) rain -dry
   Answer: 4
   wet(sprinkler) sprinkler -dry
   SATISFIABLE

   Models       : 4
   Calls        : 1
   Time         : 0.004s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
   CPU Time     : 0.004s
   #+end_example

   #+NAME: Graph Test
   #+begin_src clingo :results output :clingo-models 5 :c-W all :clingo-output-debug all :clingo-time-limit 10
   node(a;b;c;d;e).
   weight(1..3).

   { edge(X,Y,W) } :- node(X), node(Y), weight(W).

   connected(A,B) :- edge(A,B,W).
   connected(B,A) :- edge(A,B,W).
   connected(A,C) :- connected(A,B), connected(B,C), A!=B, A!=C.


   all_connected :- connected(Y,X) : node(Y), node(X), X != Y.

   all_edges(X,Z3) :- node(X), Z = #count { Y : edge(X,Y,_) }, Z2 = #count{ Y : edge(Y,X,_) }, Z3=Z+Z2.
   all_weights(Z) :- Z = #sum { W,X,Y : edge(X,Y,W) }.
   :- all_connected.
   :- edge(X,X,_).
   :- edge(X,Y,_), edge(Y,X,_).
   :- edge(X,Y,W), edge(X,Y,W2), W!=W2.
   :- all_edges(_,E), E > 2.
   :- all_edges(_,E), E = 0.

   #show edge/3.
   #show connected/2.
   #show all_connected/0.
   #show all_weights/1.
   #show all_edges/2.
   #+end_src

   #+RESULTS: Graph Test
   #+begin_example
   clingo version 5.4.0
   Reading from ...cqc0000gn/T/babel-Kew90P/clingo-E9AjGK
   Solving...
   Answer: 1
   edge(b,d,1) edge(e,c,3) edge(a,d,3) all_edges(a,1) all_edges(b,1) all_edges(c,1) all_edges(d,2) all_edges(e,1) connected(b,a) connected(d,a) connected(a,b) connected(d,b) connected(e,c) connected(a,d) connected(b,d) connected(c,e) all_weights(7)
   Answer: 2
   edge(e,c,3) edge(a,d,3) edge(b,d,3) all_edges(a,1) all_edges(b,1) all_edges(c,1) all_edges(d,2) all_edges(e,1) connected(b,a) connected(d,a) connected(a,b) connected(d,b) connected(e,c) connected(a,d) connected(b,d) connected(c,e) all_weights(9)
   Answer: 3
   edge(a,d,1) edge(b,d,1) edge(e,c,3) all_edges(a,1) all_edges(b,1) all_edges(c,1) all_edges(d,2) all_edges(e,1) connected(b,a) connected(d,a) connected(a,b) connected(d,b) connected(e,c) connected(a,d) connected(b,d) connected(c,e) all_weights(5)
   Answer: 4
   edge(a,d,1) edge(e,c,3) edge(b,d,3) all_edges(a,1) all_edges(b,1) all_edges(c,1) all_edges(d,2) all_edges(e,1) connected(b,a) connected(d,a) connected(a,b) connected(d,b) connected(e,c) connected(a,d) connected(b,d) connected(c,e) all_weights(7)
   Answer: 5
   edge(e,c,1) edge(b,d,1) edge(a,d,3) all_edges(a,1) all_edges(b,1) all_edges(c,1) all_edges(d,2) all_edges(e,1) connected(b,a) connected(d,a) connected(a,b) connected(d,b) connected(e,c) connected(a,d) connected(b,d) connected(c,e) all_weights(5)
   SATISFIABLE

   Models       : 5+
   Calls        : 1
   Time         : 2.402s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
   CPU Time     : 2.278s
   #+end_example

